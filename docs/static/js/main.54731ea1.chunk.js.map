{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrill.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrill","loading","state","setState","useEffect","then","imgs","setTimeout","console","log","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAyB5C,OACI,0BAAMC,SAjBU,SAACC,GACjBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAad,2BACIO,KAAK,OACLC,MAAOT,EACPU,SA3Bc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,Y,uBCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAKbC,EALa,iDAKkCC,UAAUH,GAL5C,+DAMDI,MAAMF,GANL,cAMbG,EANa,gBAOCA,EAAKC,OAPN,uBAOZC,EAPY,EAOZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbvB,kBAgBZM,GAhBY,4CAAH,sDCAPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAGlC,OACI,yBAAKc,UAAU,0CAEX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCJHO,EAAW,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDZ,SAACA,GAAY,IAAD,EACVd,mBAAS,CAE/BqB,KAAK,GACLa,SAAQ,IAJwB,mBAC7BC,EAD6B,KACtBC,EADsB,KA0BpC,OAhBCC,qBAAU,WACNxB,EAAQC,GACJwB,MAAK,SAAAC,GACFC,YAAW,WACPC,QAAQC,IAAIH,GACZH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAEd,UAIX,CAACpB,IAGGqB,EDtBuBQ,CAAa7B,GAA/Ba,EAHwB,EAG7BN,KAAYa,EAHiB,EAGjBA,QAYnB,OACI,oCACI,wBAAIJ,UAAU,sCAAsChB,GACnDoB,GAAW,uBAAGJ,UAAU,oCAAb,cAEZ,yBAAKA,UAAU,aACNH,EAAOJ,KAAI,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIoB,IAAKpB,EAAIC,IACLD,UExBnBqB,EAAe,WAAM,MAGM7C,mBAAS,CAAC,KAHhB,mBAGvB8C,EAHuB,KAGX/C,EAHW,KAc9B,OACI,oCACA,4CACA,4DACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAED,4BACM+C,EAAWvB,KAAI,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACA8B,IAAK9B,EACLA,SAAUA,UCtB1BiC,IAASC,OAAQ,kBAAC,EAAD,MAAiBC,SAASC,eAAe,U","file":"static/js/main.54731ea1.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n    \n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e)=>{\n       \n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit =(e)=>{\n        e.preventDefault(); //previene el comportamiento por defecto\n        \n\n        if (inputValue.trim().length>2) {\n            setCategories(cate => [inputValue, ...cate ]);\n            setInputValue('');\n            \n        }\n        \n\n    }\n\n    //los <> o fragments se utiliza para agrupar elementos html o jsx, pero si tengo algun otro elemento \n    //que los pueda agrupar por ejemplo un form o un div, no es necesario utilizarlo\n    \n    return (\n        <form onSubmit={handleSubmit}> \n        \n            <input\n                type='text'\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n            \n        </form>\n    )\n\n}\n\nAddCategory.propTypes={\n    setCategories: PropTypes.func.isRequired\n}\n","//import React from 'react';\n\nexport const getGifs = async (category)=>{\n\n    //Los helpers son funciones que hacen cierto trabajo especifico, pueden recibir argumentos\n    //lo procesan y hacen algun return, no hacen falta que  redibujen el state\n\n    const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=kcZdLdmNFbP0QIzsmKBtN5FrqS7J8Qy5`;\n    const resp= await fetch(url);\n    const {data}= await resp.json();\n\n    const gifs = data.map(img =>{\n        return {\n            id:img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n\n    // console.log(id,title,url)\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n           {/*img.title*/}\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n ","import React, {} from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n//import { getGifs } from '../helpers/getGifs';\n\nexport const GifGrill = ({category}) => {\n\n    // const [images, setImages] = useState([])\n    const {data:images,loading} = useFetchGifs(category);\n    \n    // useEffect(()=>{ //el useEffect solo se ejecuta cuando sea renderizado la primera vez\n    //     getGifs(category).then(imgs=> setImages(imgs))\n    // },[category])\n\n   \n\n    //     //getGifs();\n\n    //     console.log(images);\n\n    return (\n        <>\n            <h3 className=' animate__animated animate__fadeIn'>{category}</h3>\n            {loading && <p className='animate__animated animate__flash'>Loading...</p>}\n\n            <div className='card-grid'>\n                    {images.map(img =>( \n                        <GifGridItem \n                            key={img.id}\n                            {...img } \n                        />\n                    ))\n                    }\n                \n            </div>\n        </>    \n    )\n}\n","import {useState, useEffect} from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = (category)=>{\n    const [state, setState] = useState({\n\n        data:[],\n        loading:true\n\n        \n\n    });\n\n     useEffect(()=>{ //el useEffect solo se ejecuta cuando sea renderizado la primera vez\n         getGifs(category)\n            .then(imgs =>{\n                setTimeout(() => {\n                    console.log(imgs)\n                    setState({\n                        data:imgs,\n                        loading:false\n                    })\n                },300)\n                    \n            });\n                \n     },[category])\n\n\n    return state\n}","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrill } from './components/GifGrill';\n\n\nexport const GifExpertApp = () => {\n    \n    //const categories =['Dragon','perro','gato'];\n    const [categories, setCategories] = useState(['']) //siempre el primer argumento en este caso categories es el valor por defecto del useState\n\n    //const handleAdd=()=>{\n\n        //setCategories([...categories, 'hunter']); una manera de agregar elementos con setCategories\n        //setCategories(cate => [...categories, 'Hunter']); //otra manera: primer argumento es el primer estado anterior cate y el segundo lo que quiero agregar\n        \n\n    //}\n    \n\n    return (\n        <>\n        <h2>GifExpertApp</h2>\n        <h4>Ingresa tu busqueda de gifs:</h4>\n        <AddCategory setCategories={setCategories}/>\n        <hr/>\n\n       <ol>\n            {categories.map(category => (\n                <GifGrill \n                key={category}\n                category={category}\n                />) )\n            }\n           \n       </ol>\n        </>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp'\n\n\n\n\nReactDOM.render( <GifExpertApp/>, document.getElementById('root'));\n"],"sourceRoot":""}